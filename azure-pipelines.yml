# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: build_opwnwrt
  timeoutInMinutes: 1200
  pool:
    vmImage: 'ubuntu-latest'

  steps:
    
  - task: CmdLine@2
    name: Space_cleanup
    inputs:
      script: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        # sudo mkdir -p -m 777 $(Agent.BuildDirectory)/s/bin $(Agent.BuildDirectory)/s/build_dir/host $(Agent.BuildDirectory)/s/build_dir/hostpkg $(Agent.BuildDirectory)/s/dl $(Agent.BuildDirectory)/s/feeds $(Agent.BuildDirectory)/s/staging_dir
        # mkdir -p ./build_dir
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ls -al
      workingDirectory: '$(Agent.BuildDirectory)/s'
      
  - task: CmdLine@2
    name: Update_feeds
    inputs:
      script: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
      workingDirectory: '$(Agent.BuildDirectory)/s'

  - task: CmdLine@2
    name: Generate_configuration_file
    inputs:
      script: |
        rm -f ./.config*
        touch ./.config

        #
        # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
        # 例如:

        cat >> .config <<EOF
        CONFIG_TARGET_x86_64=y
        CONFIG_TARGET_x86_64_DEVICE_generic=y
        CONFIG_HAS_SUBTARGETS=y
        CONFIG_HAS_DEVICES=y
        CONFIG_TARGET_BOARD="x86"
        CONFIG_TARGET_SUBTARGET="64"
        CONFIG_TARGET_PROFILE="DEVICE_generic"
        CONFIG_TARGET_ARCH_PACKAGES="x86_64"
        CONFIG_GRUB_IMAGES=y
        CONFIG_GRUB_EFI_IMAGES=y
        CONFIG_GRUB_CONSOLE=y
        CONFIG_GRUB_SERIAL="ttyS0"
        CONFIG_GRUB_BAUDRATE=115200
        CONFIG_GRUB_FLOWCONTROL=y
        CONFIG_GRUB_BOOTOPTS=""
        CONFIG_GRUB_TIMEOUT="5"
        CONFIG_GRUB_TITLE="OpenWrt"
        CONFIG_ISO_IMAGES=y
        CONFIG_VMDK_IMAGES=y
        CONFIG_TARGET_IMAGES_GZIP=y
        EOF

        #
        # ===============================================================
        # 

        sed -i 's/^[ \t]*//g' ./.config
      workingDirectory: '$(Agent.BuildDirectory)/s'

  - task: CmdLine@2
    name: Make_download
    timeoutInMinutes: 120
    inputs:
      script: |
        make download -j8 || make download -j1 V=s
        rm -rf $(find ./dl/ -size -1024c)
        df -h
      workingDirectory: '$(Agent.BuildDirectory)/s'

  - task: CmdLine@2
    name: Compile_firmware
    timeoutInMinutes: 1200
    inputs:
      script: |
        make -j$(nproc) || make -j1 V=s
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h ./ --max-depth=1
        du -h ./ --max-depth=1 || true
      workingDirectory: '$(Agent.BuildDirectory)/s'
      
  - task: CmdLine@2
    name: Prepare_artifact
    inputs:
      script: |
        mkdir -p ./artifact/firmware
        mkdir -p ./artifact/package
        mkdir -p ./artifact/buildinfo
        rm -rf $(find ./bin/targets/ -type d -name "packages")
        cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
        cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
        cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      workingDirectory: '$(Agent.BuildDirectory)/s'
    
  - task: CmdLine@2
    name: compress_all
    inputs:
      script: |
        7z a -t7z -r OpenWrt_buildinfo.7z ./s/artifact/buildinfo/*
        7z a -t7z -r OpenWrt_package.7z ./s/artifact/package/*
        7z a -t7z -r OpenWrt_firmware.7z ./s/bin/targets/*
        du -ah ./*
        # 7z a -t7z -r openwrt.7z ./s/*
      workingDirectory: $(Agent.BuildDirectory)
      
  - task: PublishPipelineArtifact@1
    name: Deliver_compress_buildinfo
    inputs:
      targetPath: '$(Agent.BuildDirectory)/OpenWrt_buildinfo.7z'
      artifactName: 'compress_OpenWrt_buildinfo'
    
  - task: PublishPipelineArtifact@1
    name: Deliver_compress_package
    inputs:
      targetPath: '$(Agent.BuildDirectory)/OpenWrt_package.7z'
      artifactName: 'compress_OpenWrt_package'

  - task: PublishPipelineArtifact@1
    name: Deliver_compress_firmware
    inputs:
      targetPath: '$(Agent.BuildDirectory)/OpenWrt_firmware.7z'
      artifactName: 'compress_OpenWrt_firmware'